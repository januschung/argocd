name: Create Sealed Secret

permissions:
  contents: write
  pull-requests: write

on:
  workflow_dispatch:
    inputs:
      host:
        description: "Target host IP"
        required: true
        type: string
      secret_name:
        description: "Kubernetes Secret name"
        required: true
      namespace:
        description: "Kubernetes namespace"
        required: true
      sealed_path:
        description: "Path in repo to save the sealed secret YAML"
        required: true
      secret_json:
        description: 'Raw JSON with key/value pairs (e.g. {"username":"admin","password":"hunter2"})'
        required: true
      ssh_user:
        description: "SSH username for K3s server (e.g., ubuntu, opc)"
        required: true
        default: opc

jobs:
  seal-secret:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Install tools
        run: |
          sudo apt-get update && sudo apt-get install -y jq openssh-client
          curl -sSL https://github.com/bitnami-labs/sealed-secrets/releases/download/v0.24.5/kubeseal-0.24.5-linux-amd64.tar.gz \
            | tar -xz
          sudo mv kubeseal /usr/local/bin/
          rm README.md LICENSE
          sudo chmod +x /usr/local/bin/kubeseal

      - name: Setup SSH access
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H "${{ inputs.host }}" >> ~/.ssh/known_hosts

      - name: Fetch Sealed Secrets cert
        run: |
          ssh "${{ inputs.ssh_user }}@${{ inputs.host }}" \
            "kubectl get secret -n kube-system -l sealedsecrets.bitnami.com/sealed-secrets-key=active \
            -o jsonpath='{.items[0].data.tls\\.crt}'" \
            | base64 -d > cert.pem

      - name: Write JSON input to file
        run: |
          echo '${{ inputs.secret_json }}' > kv.json

      - name: Generate multi-key Secret YAML
        run: |
          SECRET_NAME="${{ inputs.secret_name }}"
          NAMESPACE="${{ inputs.namespace }}"

          cat <<EOF > secret.yaml
          apiVersion: v1
          kind: Secret
          metadata:
            name: $SECRET_NAME
            namespace: $NAMESPACE
          type: Opaque
          data:
          EOF

          for key in $(jq -r 'keys[]' kv.json); do
            value=$(jq -r --arg k "$key" '.[$k]' kv.json | base64 -w0)
            echo "  $key: $value" >> secret.yaml
          done

      - name: Seal the secret
        run: |
          kubeseal --format yaml --cert cert.pem < secret.yaml > sealed-secret.yaml
          rm kv.json secret.yaml cert.pem

      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Move sealed secret to path
        run: |
          mkdir -p "${{ inputs.sealed_path }}"
          mv sealed-secret.yaml "${{ inputs.sealed_path }}/${{ inputs.secret_name }}.sealed-secret.yaml"

      - name: Create PR for sealed secret
        id: cpr
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "Add sealed secret: ${{ inputs.secret_name }}"
          committer: "GitHub Actions <actions@bogus.com>"
          author: "Autobot <autobot@bogus.com>"
          title: "Add sealed secret `${{ inputs.secret_name }}`"
          body: |
            This PR adds a sealed secret for `${{ inputs.secret_name }}` in namespace `${{ inputs.namespace }}`.
          branch: "sealed-secret/${{ inputs.secret_name }}"
          base: main
          delete-branch: true

      - name: Enable auto-merge
        run: |
          for i in {1..5}; do
            echo "Attempt $i: Trying to enable auto-merge..."
            gh pr merge --merge --auto "sealed-secret/${{ inputs.secret_name }}" && break
            echo "Auto-merge failed. Retrying in 10 seconds..."
            sleep 10
          done
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

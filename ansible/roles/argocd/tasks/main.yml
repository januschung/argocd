- name: Set KUBECONFIG for Ansible to use
  ansible.builtin.set_fact:
    kubeconfig: /etc/rancher/k3s/k3s.yaml

- name: Check if helm is already installed
  command: helm version --short
  register: helm_check
  failed_when: false
  changed_when: false

- name: Install helm binary manually if missing
  when: helm_check.rc != 0
  block:
    - name: Download Helm binary (ARM64)
      get_url:
        url: https://get.helm.sh/helm-v3.18.3-linux-arm64.tar.gz
        dest: /tmp/helm.tar.gz

    - name: Extract helm binary
      unarchive:
        src: /tmp/helm.tar.gz
        dest: /tmp
        remote_src: yes

    - name: Move helm binary to /usr/bin
      command: mv /tmp/linux-arm64/helm /usr/bin/helm

    - name: Ensure Helm is executable
      file:
        path: /usr/bin/helm
        mode: '0755'
        state: file

- name: Add ArgoCD Helm repo
  kubernetes.core.helm_repository:
    name: argo
    repo_url: https://argoproj.github.io/argo-helm

- name: Copy Argo CD Helm values override to the VM
  ansible.builtin.template:
    src: argocd-values.yml.j2
    dest: /tmp/argocd-values.yaml
    mode: '0644'

- name: Install/Upgrade ArgoCD via Helm
  kubernetes.core.helm:
    name: argocd
    chart_ref: argo/argo-cd
    release_namespace: argocd
    create_namespace: true
    kubeconfig: "{{ kubeconfig }}"
    values_files:
      - /tmp/argocd-values.yaml
    wait: true
    wait_timeout: 600s
    update_repo_cache: true

- name: Copy Argo CD root bootstrap manifest to remote
  copy:
    src: ../../bootstrap/root-application.yaml   # local path, from control machine
    dest: /tmp/root-application.yaml              # remote path
    mode: '0644'

- name: Apply Argo CD root bootstrap Application
  kubernetes.core.k8s:
    state: present
    namespace: argocd
    src: /tmp/root-application.yaml               # remote path
    kubeconfig: "{{ kubeconfig }}"
